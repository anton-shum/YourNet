import telebot
from telebot import types, custom_filters

from settings import ADMINS, TELEGRAM_TOKEN, SMTP
from messages import generate_password, is_correct_mail
from orm import get_user, set_field, create_user

bot = telebot.TeleBot(TELEGRAM_TOKEN)


# states

class States:
    ask_mail = 1
    ask_password = 2
    ask_name = 3
    ask_link = 4
    complete = 5
    change_name = 6
    change_link = 7
    change_work = 8
    change_about = 9

# general functions


def help(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            callback_data='show_profile'
        ),
        types.InlineKeyboardButton(
            text='–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è',
            callback_data='change_profile'
        ),
        types.InlineKeyboardButton(
            text='–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É',
            callback_data='set_pause'
        ),
        types.InlineKeyboardButton(
            text='–°–Ω—è—Ç—å –ø–∞—É–∑—É',
            callback_data='set_run'
        )
    )

    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ', reply_markup=keyboard)

# user commands


@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    next_state = States.ask_mail

    user = get_user(user_id)
    if not user or not user.is_verified:
        create_user(user_id)
        answer = ('–ü—Ä–∏–≤–µ—Ç!ü§©\n'
                  '–Ø Random Coffee –±–æ—Ç ü§ñ\n\n'
                  '–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å '
                  '—Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, '
                  '—Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–∏ '
                  '–¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤üé≤\n\n'
                  '–í–≤–µ–¥–∏ —Å–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π mail, '
                  '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—åüìß')
    else:
        answer = ('–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!üî•\n'
                  '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - /help')
        next_state = States.complete

    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer)
    bot.set_state(user_id, next_state)


@bot.message_handler(state=States.ask_mail)
def ask_mail_handler(message):
    user_id = message.from_user.id
    next_state = States.ask_password

    mail = message.text

    if is_correct_mail(mail) and SMTP:
        answer = ('–û—Ç–ø—Ä–∞–≤–∏–ªüìÆ\n'
                  '–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∏–∑ –ø–∏—Å—å–º–∞üîë')

        set_field(user_id, 'mail', mail)
        set_field(user_id, 'password', generate_password())
    elif is_correct_mail(mail) and not SMTP:
        answer = ('–ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É, '
                  f'—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å ({", ".join(ADMINS)})üõ°Ô∏è\n'
                  '–ò –≤–≤–µ–¥–∏ –µ–≥–æ —Å—é–¥–∞üîë')
        set_field(user_id, 'mail', mail)
        set_field(user_id, 'password', generate_password())
    else:
        answer = ('–í–≤–µ–¥–∏ —Å–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π mail, '
                  '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—åüìß')
        next_state = States.ask_mail

    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer)
    bot.set_state(user_id, next_state)


@bot.message_handler(state=States.ask_password)
def ask_password_handler(message):
    user_id = message.from_user.id
    next_state = States.ask_name

    password = message.text
    user = get_user(user_id)

    if user.password == password:
        answer = ('–¢—ã –≤ —Å–∏—Å—Ç–µ–º–µüåê\n\n'
                  '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?‚òïÔ∏è')
        set_field(user_id, 'is_verified', True)
    else:
        answer = ('–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n')
        next_state = States.ask_password

    bot.send_message(user_id, answer)
    bot.set_state(user_id, next_state)


@bot.message_handler(state=States.ask_name)
def ask_name_handler(message):
    user_id = message.from_user.id
    next_state = States.ask_link

    name = message.text

    answer = ('–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!)\n\n'
              '–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å '
              '–≤ –ª—é–±–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. '
              '–¢–∞–∫ –≤—ã –≤ –ø–∞—Ä–µ —Å–º–æ–∂–µ—Ç–µ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å '
              '–¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ –¥–æ –≤—Å—Ç—Ä–µ—á–∏üîé')

    set_field(user_id, 'name', name)

    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer)
    bot.set_state(user_id, next_state)


@bot.message_handler(state=States.ask_link)
def ask_link_handler(message):
    user_id = message.from_user.id
    next_state = States.complete

    link = message.text

    answer = ('–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ!‚ú®\n\n'
              '–°–≤–æ—é –ø–∞—Ä—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Ç—ã –±—É–¥–µ—à—å —É–∑–Ω–∞–≤–∞—Ç—å'
              ' –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n'
              '–ù–∞–ø–∏—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É –≤ Telegram, '
              '—á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –∑–≤–æ–Ω–∫–µ\n'
              '–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–∞–º–∏\n\n'
              '–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - /help!)')

    set_field(user_id, 'link', link)

    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer)
    bot.set_state(user_id, next_state)


@bot.message_handler(commands=['help'], state=[States.complete])
def help_handler(message):
    help(message)


@bot.message_handler(state=States.change_name)
def change_name_handler(message):
    user_id = message.from_user.id
    next_state = States.complete

    name = message.text

    answer = '–ì–æ—Ç–æ–≤–æ'

    set_field(user_id, 'name', name)

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)


@bot.message_handler(state=States.change_link)
def change_link_handler(message):
    user_id = message.from_user.id
    next_state = States.complete

    link = message.text

    answer = '–ì–æ—Ç–æ–≤–æ'

    set_field(user_id, 'link', link)

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)


@bot.message_handler(state=States.change_work)
def change_work_handler(message):
    user_id = message.from_user.id
    next_state = States.complete

    work = message.text

    answer = '–ì–æ—Ç–æ–≤–æ'

    set_field(user_id, 'work', work)

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)


@bot.message_handler(state=States.change_about)
def change_about_handler(message):
    user_id = message.from_user.id
    next_state = States.complete

    about = message.text

    answer = '–ì–æ—Ç–æ–≤–æ'

    set_field(user_id, 'about', about)

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)

# user callbacks


@bot.callback_query_handler(func=lambda call: call.data in ['help', 'help_from_show_profile'])
def change_profile_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id

    answer = call.message.text

    if call.data == 'help_from_show_profile':
        user = get_user(user_id)
        answer = (
            '–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n\n'
            f'{user}'
        )

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer,
        parse_mode='Markdown'
    )

    help(call)


@bot.callback_query_handler(func=lambda call: call.data == 'show_profile')
def show_profile_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id

    answer = ('üëâ –•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer
    )

    user = get_user(user_id)
    answer = (
        '–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n\n'
        f'{user}'
    )

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help_from_show_profile'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, parse_mode='Markdown', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'change_name')
def change_profile_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    next_state = States.change_name

    answer = ('üëâ –°–≤–æ—ë –∏–º—è')

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer
    )

    answer = ('–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è')

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)


@bot.callback_query_handler(func=lambda call: call.data == 'change_link')
def change_profile_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    next_state = States.change_link

    answer = ('üëâ –°—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å')

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer
    )

    answer = ('–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É')

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)


@bot.callback_query_handler(func=lambda call: call.data == 'change_work')
def change_profile_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    next_state = States.change_work

    answer = ('üëâ –ö–µ–º —Ä–∞–±–æ—Ç–∞—é')

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer
    )

    answer = ('–ù–∞–ø–∏—à–∏, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –ø–æ —Ä–∞–±–æ—Ç–µ')

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)


@bot.callback_query_handler(func=lambda call: call.data == 'change_about')
def change_profile_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    next_state = States.change_about

    answer = ('üëâ –û —Å–µ–±–µ')

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer
    )

    answer = ('–ù–∞–ø–∏—à–∏  –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:'
              ' –ø–∞—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ —Ç–≤–æ–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö'
              ' –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –≤–∑–≥–ª—è–¥–∞—Ö, —Ö–æ–±–±–∏')

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)


@bot.callback_query_handler(func=lambda call: call.data == 'change_profile')
def change_profile_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    next_state = States.complete

    answer = ('üëâ –ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è')

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer
    )

    answer = ('–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?')

    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1

    keyboard.add(
        types.InlineKeyboardButton(
            text='–°–≤–æ—ë –∏–º—è',
            callback_data='change_name'
        ),
        types.InlineKeyboardButton(
            text='–°—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å',
            callback_data='change_link'
        ),
        types.InlineKeyboardButton(
            text='–ö–µ–º —Ä–∞–±–æ—Ç–∞—é',
            callback_data='change_work'
        ),
        types.InlineKeyboardButton(
            text='–û —Å–µ–±–µ',
            callback_data='change_about'
        ),
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)
    bot.set_state(user_id, next_state)


@bot.callback_query_handler(func=lambda call: call.data == 'set_pause')
def set_pause_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id

    answer = ('üëâ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É')

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer
    )

    answer = ('–ì–æ—Ç–æ–≤–æ')

    set_field(user_id, 'is_active', False)

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'set_run')
def set_run_callback(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id

    answer = ('üëâ –°–Ω—è—Ç—å –ø–∞—É–∑—É')

    bot.send_chat_action(user_id, 'typing')
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=answer
    )

    answer = ('–ì–æ—Ç–æ–≤–æ')

    set_field(user_id, 'is_active', True)

    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='help'
        )
    )
    bot.send_chat_action(user_id, 'typing')
    bot.send_message(user_id, answer, reply_markup=keyboard)


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.add_custom_filter(custom_filters.IsDigitFilter())

if __name__ == "__main__":
    bot.polling()
