import logging

from sqlalchemy.sql.functions import user
import telebot
from telebot import types, custom_filters
from sqlalchemy.orm import sessionmaker

from models import engine
from settings import ADMINS, TELEGRAM_TOKEN
from orm import get_password, set_active, register_user, set_link, set_admin, set_mail, is_verified, set_verified, get_profile, is_active, is_admin, set_name, get_users
from messages import send_password, is_correct_mail, is_correct_company

logging.basicConfig()
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

session = sessionmaker(engine)()
bot = telebot.TeleBot(TELEGRAM_TOKEN)


class States:
    send_mail = 1
    ask_password = 2
    ask_name = 3
    ask_about = 4
    ask_mode = 5


def ask_about_mode(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 2

    button_run = types.InlineKeyboardButton(text='–Ø –≤ –¥–µ–ª–µ!üî•', callback_data='run')
    button_stop = types.InlineKeyboardButton(text='–í –¥—Ä—É–≥–æ–π —Ä–∞–∑üò¥', callback_data='stop')

    keyboard.add(button_run, button_stop)

    bot.send_message(chat_id, '–£—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?', reply_markup=keyboard)


def help(chat_id):
    if is_verified(session, chat_id):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row_width = 2

        button_profile = types.InlineKeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')
        button_mode = types.InlineKeyboardButton(text='–ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data='my_mode')
        button_change = types.InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data='change_mode')

        keyboard.add(button_profile, button_mode)
        keyboard.add(button_change)

        if is_admin(session, chat_id):
            button_users = types.InlineKeyboardButton(text='–£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data='get_users')
            button_pairs = types.InlineKeyboardButton(text='–ü–∞—Ä—ã', callback_data='get_pairs')
            keyboard.add(button_users, button_pairs)

            button_generate_pairs = types.InlineKeyboardButton(
                text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã', callback_data='generate_pairs')
            button_send_invites = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', callback_data='send_invites')
            keyboard.add(button_generate_pairs, button_send_invites)

        bot.send_message(chat_id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=keyboard)


@bot.message_handler(commands=['help'])
def help_handler(message):
    help(message.from_user.id)


@bot.message_handler(commands=['start'])
def start(message):
    register_user(session, message.from_user.id)
    if message.from_user.username in ADMINS:
        set_admin(session, message.from_user.id, True)
    if is_verified(session, message.from_user.id):
        bot.set_state(message.from_user.id, States.ask_name)
        bot.send_message(message.from_user.id,
                         '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!ü§©\n–ö–∞–∫ —Ç–µ–±—ã –∑–æ–≤—É—Ç?')
    else:
        bot.set_state(message.from_user.id, States.send_mail)
        bot.send_message(message.from_user.id,
                         '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!ü§©\n–í–≤–µ–¥–∏ —Å–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π mail, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—åüìß')


@bot.message_handler(state=States.send_mail)
def send_password_telegram(message):
    mail = message.text
    user_id = message.from_user.id
    if is_correct_mail(mail) and is_correct_company(mail):
        set_mail(session, user_id, mail)
        send_password(mail, get_password(session, user_id))
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤–∏–ªüìÆ\n–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∏–∑ –ø–∏—Å—å–º–∞üîë')
        bot.set_state(user_id, States.ask_password)
    elif not is_correct_mail(mail):
        bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º‚ö†Ô∏è')
    elif not is_correct_company(mail):
        bot.send_message(user_id, '–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏‚ö†Ô∏è')
    else:
        bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫üòî')


@bot.message_handler(state=States.ask_password)
def ask_info(message):
    password = message.text
    user_id = message.from_user.id
    if get_password(session, user_id) == (password,):
        set_verified(session, user_id)
        bot.send_message(user_id,
                         '–¢—ã –≤ —Å–∏—Å—Ç–µ–º–µüåê\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        bot.set_state(message.from_user.id, States.ask_name)
    else:
        bot.send_message(user_id, '–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç‚ö†Ô∏è')


@bot.message_handler(state=States.ask_name)
def done(message):
    name = message.text
    set_name(session, message.from_user.id, name)
    bot.send_message(message.from_user.id,
                     '–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!)\n\n–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –¢–∞–∫ –≤—ã –≤ –ø–∞—Ä–µ —Å–º–æ–∂–µ—Ç–µ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ –¥–æ –≤—Å—Ç—Ä–µ—á–∏üîé')
    bot.set_state(message.from_user.id, States.ask_mode)
    ask_about_mode(message.from_user.id)


@bot.message_handler(state=States.ask_about)
def done(message):
    link = message.text
    set_link(session, message.from_user.id, link)
    set_active(session, message.from_user.id, True)
    bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ!‚ú®\n–°–≤–æ—é –ø–∞—Ä—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Ç—ã –±—É–¥–µ—à—å —É–∑–Ω–∞–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n–ù–∞–ø–∏—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É –≤ Telegram, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –∑–≤–æ–Ω–∫–µ\n–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–∞–º–∏')
    bot.set_state(message.from_user.id, States.ask_mode)
    ask_about_mode(message.from_user.id)


@bot.callback_query_handler(func=lambda call: call.data == 'run')
def run_callback(call):
    set_active(session, call.from_user.id, True)
    bot.answer_callback_query(call.id, '–ñ–¥–∏ –ø–∞—Ä—É!)')


@bot.callback_query_handler(func=lambda call: call.data == 'stop')
def stop_callback(call):
    set_active(session, call.from_user.id, False)
    bot.answer_callback_query(call.id, '–ó–∞—Ö–æ–¥–∏ –µ—â–µ!)')


@bot.callback_query_handler(func=lambda call: call.data == 'my_profile')
def my_profile_callback(call):
    profile = get_profile(session, call.from_user.id)
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, f'üï¥Ô∏è{profile[0]}\nüìß {profile[1]}\nü§≥ {profile[2]}')


@bot.callback_query_handler(func=lambda call: call.data == 'my_mode')
def my_mode_callback(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, '–¢—ã –≤ –¥–µ–ª–µ!' if is_active(session, call.from_user.id) else '–ù–∞ –ø–∞—É–∑–µ')


@bot.callback_query_handler(func=lambda call: call.data == 'change_mode')
def change_mode_callback(call):
    bot.answer_callback_query(call.id)
    ask_about_mode(call.from_user.id)


@bot.callback_query_handler(func=lambda call: call.data == 'get_users')
def get_users_callback(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, '\n'.join([
        f'\'{user[0]}\' - \'{user[1]}\' - is_active? {user[2]} - \'{user[3]}\' - \'{user[4]}\'' for user in get_users(session)
    ]))


@bot.callback_query_handler(func=lambda call: call.data == 'get_pairs')
def get_pairs_callback(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–∞—Ä—ã')


@ bot.callback_query_handler(func=lambda call: call.data == 'generate_pairs')
def change_mode_callback(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è')


@ bot.callback_query_handler(func=lambda call: call.data == 'send_invites')
def change_mode_callback(call):
    bot.answer_callback_query(call.id)
    ask_about_mode(call.from_user.id)


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.add_custom_filter(custom_filters.IsDigitFilter())

if __name__ == "__main__":
    bot.polling()
