import logging
import telebot
from telebot import types, custom_filters
from sqlalchemy.orm import sessionmaker

from models import engine
from settings import TELEGRAM_TOKEN
from messages import send_password, is_correct_mail
from orm import get_password, set_active

logging.basicConfig()
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

session = sessionmaker(engine)()
bot = telebot.TeleBot(TELEGRAM_TOKEN)


class States:
    send_mail = 1
    ask_password = 2
    ask_about = 3
    ask_mode = 4
    is_admin = 5


def ask_about_mode(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 2

    button_run = types.InlineKeyboardButton(text='–Ø –≤ –¥–µ–ª–µ!üî•', callback_data='run')
    button_stop = types.InlineKeyboardButton(text='–í –¥—Ä—É–≥–æ–π —Ä–∞–∑üò¥', callback_data='stop')

    keyboard.add(button_run, button_stop)

    bot.send_message(chat_id, '–£—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?', reply_markup=keyboard)


@bot.message_handler(commands=['start'])
def start(message):
    bot.set_state(message.from_user.id, States.send_mail)
    bot.send_message(message.from_user.id,
                     '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!ü§©\n–í–≤–µ–¥–∏ —Å–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π mail, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—åüìß')


@bot.message_handler(state=States.send_mail)
def send_password_telegram(message):
    mail = message.text
    user_id = message.from_user.id
    if is_correct_mail(mail):
        send_password(mail, get_password(session, user_id))
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤–∏–ªüìÆ\n–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∏–∑ –ø–∏—Å—å–º–∞üîë')
        bot.set_state(user_id, States.ask_password)
    elif not is_correct_mail(mail):
        bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º‚ö†Ô∏è')
    else:
        bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫üòî')


@bot.message_handler(state=States.ask_password)
def ask_info(message):
    user_id = message.from_user.id
    bot.send_message(user_id,
                     '–¢—ã –≤ —Å–∏—Å—Ç–µ–º–µüåê\n\n–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –¢–∞–∫ –≤—ã –≤ –ø–∞—Ä–µ —Å–º–æ–∂–µ—Ç–µ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ –¥–æ –≤—Å—Ç—Ä–µ—á–∏üîé')
    bot.set_state(message.from_user.id, States.ask_about)


@bot.message_handler(state=States.ask_about)
def done(message):
    bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ!‚ú®')
    bot.set_state(message.from_user.id, States.ask_mode)
    ask_about_mode(message.from_user.id)


@bot.message_handler(commands=['mode'])
def get_mode(message):
    ask_about_mode(message.from_user.id)


@bot.callback_query_handler(func=lambda call: True)
def get_mode_callback(call):
    if call.data == "run":
        set_active(session, call.from_user.id, True)
        bot.answer_callback_query(call.id, '–ñ–¥–∏ –ø–∞—Ä—É!)')
    elif call.data == "stop":
        set_active(session, call.from_user.id, False)
        bot.answer_callback_query(call.id, '–ó–∞—Ö–æ–¥–∏ –µ—â–µ!)')


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.add_custom_filter(custom_filters.IsDigitFilter())

if __name__ == "__main__":
    bot.polling()
